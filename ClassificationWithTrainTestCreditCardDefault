{"cells":[{"cell_type":"markdown","metadata":{"id":"ioQllDDHlLDQ"},"source":["# Classification Exercise - Credit Card Defaults\n","\n","We will use credit card default data from https://www.kaggle.com/datasets/uciml/default-of-credit-card-clients-dataset\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hNNMaMAHk8pq"},"outputs":[],"source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","pd.options.display.float_format = '{:,.2f}'.format"]},{"cell_type":"markdown","metadata":{"id":"IVfT952YltQZ"},"source":["## Step-1: Download Data"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Pq-p7ssilZdE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1681712290013,"user_tz":-330,"elapsed":1943,"user":{"displayName":"Connect ED","userId":"10883136249140137055"}},"outputId":"a40622c1-b727-44ee-872c-efaddd61e811"},"outputs":[{"output_type":"stream","name":"stdout","text":["data_location: default.csv\n"]}],"source":["import os\n","import urllib.request\n","\n","data_url = 'https://raw.githubusercontent.com/elephantscale/datasets/master/credit-card-default/default.csv'\n","data_location = os.path.basename(data_url)\n","\n","if not os.path.exists (data_location):\n","    print(\"Downloading : \", data_url)\n","    urllib.request.urlretrieve(data_url, data_location)\n","print('data_location:', data_location)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gDYImJcJlyjl","colab":{"base_uri":"https://localhost:8080/","height":456},"executionInfo":{"status":"ok","timestamp":1681712290014,"user_tz":-330,"elapsed":21,"user":{"displayName":"Connect ED","userId":"10883136249140137055"}},"outputId":"a42aa6ae-7c38-45b2-f504-62ff9f3be12d"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["          ID  LIMIT_BAL  SEX  EDUCATION  MARRIAGE  AGE  PAY_0  PAY_2  PAY_3  \\\n","22276  22277     230000    2          1         2   28     -2     -2     -2   \n","15385  15386      90000    2          2         1   34     -1      2     -1   \n","10444  10445      10000    2          2         1   22     -1     -1     -1   \n","19623  19624     250000    2          2         1   37      0      0      0   \n","17888  17889     240000    1          2         1   33      1      2      2   \n","23283  23284     130000    2          2         1   35      0      0      0   \n","11121  11122     240000    2          1         2   29     -1     -1     -1   \n","26559  26560      50000    2          2         2   51      0      0      0   \n","5529    5530     140000    1          3         2   39      0      0      0   \n","18553  18554      50000    2          1         2   25      0      0      2   \n","\n","       PAY_4  ...  BILL_AMT4  BILL_AMT5  BILL_AMT6  PAY_AMT1  PAY_AMT2  \\\n","22276     -2  ...          0          0       8878         0       916   \n","15385     -1  ...          0          0          0         0       432   \n","10444      0  ...       9363       8160       7552       390      9159   \n","19623      0  ...     224949     229577     234221      8000      9510   \n","17888      0  ...      39578      46489      45632      6765         0   \n","23283      0  ...      65517      66925      68344      5500      7328   \n","11121     -1  ...        326        476        326       326       326   \n","26559      0  ...      20145      19620      18872      1738      1746   \n","5529       0  ...      10776       1059          0     10000      1000   \n","18553      0  ...      43127      44210      45844      4000         0   \n","\n","       PAY_AMT3  PAY_AMT4  PAY_AMT5  PAY_AMT6  default  \n","22276         0         0      8878       800        1  \n","15385         0         0         0         0        1  \n","10444       700       279      1000       800        0  \n","19623      8160      8364      8493      8625        0  \n","17888      2000      7592         0    140000        0  \n","23283      5000      2500      2500      3000        0  \n","11121       326       476       326      3926        0  \n","26559      1289      1684       684       702        0  \n","5529          0      1059         0         0        0  \n","18553      2000      1800      2500      5500        1  \n","\n","[10 rows x 25 columns]"],"text/html":["\n","  <div id=\"df-f251dfee-9f54-4270-8df1-9fdcf8264da3\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>ID</th>\n","      <th>LIMIT_BAL</th>\n","      <th>SEX</th>\n","      <th>EDUCATION</th>\n","      <th>MARRIAGE</th>\n","      <th>AGE</th>\n","      <th>PAY_0</th>\n","      <th>PAY_2</th>\n","      <th>PAY_3</th>\n","      <th>PAY_4</th>\n","      <th>...</th>\n","      <th>BILL_AMT4</th>\n","      <th>BILL_AMT5</th>\n","      <th>BILL_AMT6</th>\n","      <th>PAY_AMT1</th>\n","      <th>PAY_AMT2</th>\n","      <th>PAY_AMT3</th>\n","      <th>PAY_AMT4</th>\n","      <th>PAY_AMT5</th>\n","      <th>PAY_AMT6</th>\n","      <th>default</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>22276</th>\n","      <td>22277</td>\n","      <td>230000</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>28</td>\n","      <td>-2</td>\n","      <td>-2</td>\n","      <td>-2</td>\n","      <td>-2</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>8878</td>\n","      <td>0</td>\n","      <td>916</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>8878</td>\n","      <td>800</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>15385</th>\n","      <td>15386</td>\n","      <td>90000</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>34</td>\n","      <td>-1</td>\n","      <td>2</td>\n","      <td>-1</td>\n","      <td>-1</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>432</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>10444</th>\n","      <td>10445</td>\n","      <td>10000</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>22</td>\n","      <td>-1</td>\n","      <td>-1</td>\n","      <td>-1</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>9363</td>\n","      <td>8160</td>\n","      <td>7552</td>\n","      <td>390</td>\n","      <td>9159</td>\n","      <td>700</td>\n","      <td>279</td>\n","      <td>1000</td>\n","      <td>800</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>19623</th>\n","      <td>19624</td>\n","      <td>250000</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>37</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>224949</td>\n","      <td>229577</td>\n","      <td>234221</td>\n","      <td>8000</td>\n","      <td>9510</td>\n","      <td>8160</td>\n","      <td>8364</td>\n","      <td>8493</td>\n","      <td>8625</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>17888</th>\n","      <td>17889</td>\n","      <td>240000</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>33</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>39578</td>\n","      <td>46489</td>\n","      <td>45632</td>\n","      <td>6765</td>\n","      <td>0</td>\n","      <td>2000</td>\n","      <td>7592</td>\n","      <td>0</td>\n","      <td>140000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>23283</th>\n","      <td>23284</td>\n","      <td>130000</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>35</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>65517</td>\n","      <td>66925</td>\n","      <td>68344</td>\n","      <td>5500</td>\n","      <td>7328</td>\n","      <td>5000</td>\n","      <td>2500</td>\n","      <td>2500</td>\n","      <td>3000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>11121</th>\n","      <td>11122</td>\n","      <td>240000</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>29</td>\n","      <td>-1</td>\n","      <td>-1</td>\n","      <td>-1</td>\n","      <td>-1</td>\n","      <td>...</td>\n","      <td>326</td>\n","      <td>476</td>\n","      <td>326</td>\n","      <td>326</td>\n","      <td>326</td>\n","      <td>326</td>\n","      <td>476</td>\n","      <td>326</td>\n","      <td>3926</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>26559</th>\n","      <td>26560</td>\n","      <td>50000</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>51</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>20145</td>\n","      <td>19620</td>\n","      <td>18872</td>\n","      <td>1738</td>\n","      <td>1746</td>\n","      <td>1289</td>\n","      <td>1684</td>\n","      <td>684</td>\n","      <td>702</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>5529</th>\n","      <td>5530</td>\n","      <td>140000</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>39</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>10776</td>\n","      <td>1059</td>\n","      <td>0</td>\n","      <td>10000</td>\n","      <td>1000</td>\n","      <td>0</td>\n","      <td>1059</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>18553</th>\n","      <td>18554</td>\n","      <td>50000</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>25</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>43127</td>\n","      <td>44210</td>\n","      <td>45844</td>\n","      <td>4000</td>\n","      <td>0</td>\n","      <td>2000</td>\n","      <td>1800</td>\n","      <td>2500</td>\n","      <td>5500</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>10 rows × 25 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f251dfee-9f54-4270-8df1-9fdcf8264da3')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-f251dfee-9f54-4270-8df1-9fdcf8264da3 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-f251dfee-9f54-4270-8df1-9fdcf8264da3');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":6}],"source":["data = pd.read_csv(data_location)\n","data.sample(10)"]},{"cell_type":"markdown","metadata":{"id":"FLVjKutTmS7w"},"source":["## Step-2: EDA"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"J8urGA1nl0gH","colab":{"base_uri":"https://localhost:8080/","height":131},"executionInfo":{"status":"error","timestamp":1681712290014,"user_tz":-330,"elapsed":19,"user":{"displayName":"Connect ED","userId":"10883136249140137055"}},"outputId":"3722e452-f946-4af9-af56-bab5a40bfcf1"},"outputs":[{"output_type":"error","ename":"SyntaxError","evalue":"ignored","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-7-a2118069f63f>\"\u001b[0;36m, line \u001b[0;32m2\u001b[0m\n\u001b[0;31m    data.???()\u001b[0m\n\u001b[0m         ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"]}],"source":["## TODO: data.describe()\n","data.???()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"awy4QJnenY3l"},"outputs":[],"source":["## Check data skew\n","data['default'].value_counts()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"A4FKhxDaiby3"},"outputs":[],"source":["data['default'].value_counts(normalize=True)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"9XCzrsFgomax"},"outputs":[],"source":["## TODO: correlation matrix\n","## Hint: data.corr()\n","data.???()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"DBngZ5G1pdDU"},"outputs":[],"source":["plt.figure(figsize = (30,10))\n","\n","#sns.set_context(\"talk\", font_scale=0.9) \n","sns.heatmap(data.corr(), cmap='rainbow_r', annot=True, fmt='.2f')"]},{"cell_type":"markdown","metadata":{"id":"FUKVrI47sAZO"},"source":["## Step-3: Clean up \n","\n","TODO"]},{"cell_type":"markdown","metadata":{"id":"F3x3Ur41sIKC"},"source":["## Step-4: Shape data"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"C1QjYZz1r4l8"},"outputs":[],"source":["label_col = 'default'\n","\n","feature_columns = data.columns\n","## TODO : drop 'ID' and 'default' columns\n","feature_columns = feature_columns.drop (['ID', '???'])\n","#print (feature_columns)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"9kCuOXtGsGd6"},"outputs":[],"source":["X = data[feature_columns]\n","y = data[[label_col]]\n","\n","print (X.shape)\n","print (y.shape)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qT7gRx7DtI6Q"},"outputs":[],"source":["from sklearn.model_selection import train_test_split\n","\n","## TODO : split data into train / test, with 20% for test\n","## hint : 20% is 0.2\n","\n","X_train,X_test,y_train, y_test = train_test_split(X,y,  test_size=???, random_state=123)\n","\n","\n","print (\"x_train :\" , X_train.shape )\n","print (\"x_test :\", X_test.shape)\n","print (\"y_train :\", y_train.shape)\n","print (\"y_test :\", y_test.shape)"]},{"cell_type":"markdown","metadata":{"id":"1tybhfVXtlNN"},"source":["## Step-5: Classification Algo"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"g3GHYno1te-w"},"outputs":[],"source":["%%time\n","\n","import numpy as np\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.svm import LinearSVC\n","from sklearn.ensemble import GradientBoostingClassifier\n","\n","algo = LogisticRegression(max_iter=500)\n","#algo = LinearSVC(max_iter=5000)\n","#algo = RandomForestClassifier()\n","#algo = GradientBoostingClassifier()\n","\n","\n","## TODO: fit (X_train, y_train)\n","model = algo.fit(X_???, np.ravel(y_???))\n","print (model)"]},{"cell_type":"markdown","metadata":{"id":"7BPibCyyuR26"},"source":["## Step-6 : Evaluate"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-YLUHLhyt8WB"},"outputs":[],"source":["## TODO : predict on X_test\n","## hint : 'X_test'\n","\n","y_pred = model.predict (X_???)\n","y_pred"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"j0TG9t3XwZHj"},"outputs":[],"source":["# values, counts = np.unique(y_pred, return_counts=True)\n","# print (values, counts)\n","# pd.DataFrame({'values' : values, 'counts' : counts})"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7FfSXWq8ujEx"},"outputs":[],"source":["train_accuracy = model.score(X_train,y_train)\n","print (\"Train accuracy: \", train_accuracy)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"s5yI6PeTuoJx"},"outputs":[],"source":["## TODO : calculate accuracty for test set\n","## Hint : model.score (X_test, y_test)\n","\n","test_accuracy = model.score(X_test, y_???)\n","print (\"Test accuracy: \", test_accuracy)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ivbRQVBkuysg"},"outputs":[],"source":["from sklearn.metrics import confusion_matrix\n","import numpy as np\n","\n","cm_labels = np.unique(y)\n","cm_array = confusion_matrix(y_test, y_pred)\n","#print (cm_array)\n","\n","cm_df = pd.DataFrame(cm_array, index=cm_labels, columns=cm_labels)\n","cm_df"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pK1U05-gu3iQ"},"outputs":[],"source":["import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","plt.figure(figsize = (8,5))\n","\n","# colormaps : cmap=\"YlGnBu\" , cmap=\"Greens\", cmap=\"Blues\",  cmap=\"Reds\"\n","sns.heatmap(cm_df, annot=True, cmap=\"Reds\", fmt='d').plot()"]}],"metadata":{"colab":{"provenance":[{"file_id":"https://github.com/elephantscale/machine-learning-workshop/blob/main/classifications/classification-1-credit-card-default.ipynb","timestamp":1681706831650}]},"kernelspec":{"display_name":"Python 3 (ipykernel)","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.13"}},"nbformat":4,"nbformat_minor":0}